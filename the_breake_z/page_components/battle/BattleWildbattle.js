/* next Module */
import GridInputSelectBox from "/page_components/Grid/GridInputSelectBox";
import GridInputText from "/page_components/Grid/GridInputText";
import GridInputButton from "/page_components/Grid/GridInputButton";
import SelectDropdownText from "/page_components/public/SelectDropdownText";
import { LocalDataContext } from "/page_components/MyContext";
import { useEffect, useState, useRef, useContext } from "react";
import { initAutoComplete } from "/scripts/client/autoComplete";
import { getRandomInt, asyncInterval, devLog } from "/scripts/common";
import { copyToClipBoard, clickCopyToClipBoard, findLocalDataByName } from "/scripts/client/client";

/**
 *
 * @param {*} isActive Ìï¥Îãπ Ïª¥Ìè¨ÎÑåÌä∏Ïùò ÌôúÏÑ±Ìôî Ïó¨Î∂Ä
 * @returns
 */
export default function Layout(props) {
    let isActive = props?.isActive || "activate-tab"; //"hidden";
    const localData = useContext(LocalDataContext);

    let pageName = "wildbattle";
    const boilerplateSync = useRef();
    const [boilerplate, setBoilerplate] = useState({});
    const [boilerplateViewType, setBoilerplateViewType] = useState("dropdown");

    let initState = true;
    const attackOption = ["‚úåÔ∏èÏû¨Îπ†Î•∏ Í≥µÍ≤©", "‚úäÎ¨µÏßÅÌïú Í≥µÍ≤©", "üñêÔ∏èÏú†Ïó∞Ìïú Í≥µÍ≤©"];

    useEffect(() => {
        init();
    }, []);

    function init() {
        if (initState) {
            try {
                initAutoComplete("i-wildbattle-first-poketmon", "poketmon", localData);
                initAutoComplete("i-wildbattle-second-poketmon", "poketmon", localData);
            } catch (e) {
                devLog("BattleWildbattle init error. localData :", localData, e.message);
            }
            initState = false;
            if (!boilerplateSync.current) {
                boilerplateSync.current = new asyncInterval(() => {
                    devLog(pageName + " ÌéòÏù¥ÏßÄÏóêÏÑú Ï†ÑÏó≠Î≥ÄÏàòÎ°ú Ïù∏Ìïú Îä¶ÏùÄ ÏÉÅÏö©Î¨∏Íµ¨ Ï∂úÎ†•ÏùÑ Í∏∞Îã§Î¶¨Í≥† ÏûàÏäµÎãàÎã§.", localData?.boilerplate, localData?.boilerplate?.[pageName], boilerplateSync.current);
                    if (localData?.boilerplate?.[pageName]) {
                        devLog(pageName + " ÌéòÏù¥ÏßÄÏóêÏÑú Ï†ÑÏó≠Î≥ÄÏàòÎ°ú Ïù∏Ìïú Îä¶ÏùÄ ÏÉÅÏö©Î¨∏Íµ¨ Ï∂úÎ†•ÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§");
                        boilerplateSync.current.stop();
                        setBoilerplate(localData?.boilerplate?.[pageName]);
                        return null;
                    }
                }, 3);
                boilerplateSync.current.start();
            }
        }
    }

    function createTextWildBattle(preClassName, isStrange = false) {
        devLog("createTextWildBattle : ", localData);
        let inputOrder = ["first", "second"];
        let inputList = ["poketmon", "health", "attack", "compatibility"];
        let spanList = ["poketmon", "health", "attack", "damage"];
        let compatibilityDamage = {
            Ïäπ: 5,
            Ìå®: 2,
            Î¨¥: 3,
        };
        let strangeFirstDamage = {
            Ïäπ: 5,
            Ìå®: 2,
            Î¨¥: 0,
        };
        let strangeSecondDamage = {
            Ïäπ: 6,
            Ìå®: 3,
            Î¨¥: 2,
        };
        // wildbattle-frame i-wildbattle-first
        let inputValues = {};
        inputOrder.forEach((order) => {
            inputValues[order] = {};
            inputList.forEach((input) => {
                inputValues[order][input] = document.querySelector(".wildbattle-frame #i-wildbattle-" + order + "-" + input).value || undefined;
            });
        });
        if (isStrange) {
            inputValues["first"]["damage"] = strangeFirstDamage[inputValues["first"]["compatibility"]];
            inputValues["second"]["damage"] = strangeSecondDamage[inputValues["second"]["compatibility"]];
        } else {
            inputValues["first"]["damage"] = compatibilityDamage[inputValues["first"]["compatibility"]];
            inputValues["second"]["damage"] = compatibilityDamage[inputValues["second"]["compatibility"]];
        }
        inputValues["first"]["health"] = inputValues["first"]["health"] - inputValues["second"]["damage"];
        inputValues["second"]["health"] = inputValues["second"]["health"] - inputValues["first"]["damage"];

        inputOrder.forEach((order) => {
            spanList.forEach((span) => {
                let targetNode = document.querySelectorAll(preClassName + " .wb-" + order + "[data-name='" + span + "']");
                targetNode.forEach((node) => {
                    node.innerText = inputValues[order][span];
                });
            });
        });
    }

    return (
        <>
            <div id="battlepage-wildbattle" className={isActive}>
                <div className="flex mt-4">
                    <div className="flex flex-col w-2/3">
                        <div className="bg-white">
                            <div className="mx-auto py-2 px-2">
                                <div className="flex flex-col w-full">
                                    <div className="my-2">
                                        <div className="shadow rounded-md">
                                            <div className="bg-white px-4 py-3">
                                                <div className="wildbattle-frame grid grid-cols-6 gap-6">
                                                    <GridInputText id={"i-wildbattle-first-poketmon"} dataName={"poketmon"} colSpan={2} label={"ÏÑ†Í≥µÌè¨ÏºìÎ™¨"}></GridInputText>
                                                    <GridInputSelectBox id={"i-wildbattle-first-attack"} dataName={"attack"} colSpan={2} label={"Í≥µÍ≤©"} options={attackOption}></GridInputSelectBox>
                                                    <GridInputText id={"i-wildbattle-first-health"} dataName={"health"} colSpan={1} label={"ÌòÑÏû¨ Ï≤¥Î†•"} default={10}></GridInputText>
                                                    <GridInputSelectBox
                                                        id={"i-wildbattle-first-compatibility"}
                                                        dataName={"compatibility"}
                                                        colSpan={1}
                                                        label={"ÏÉÅÏÑ± Í≤∞Í≥º"}
                                                        options={["Ïäπ", "Ìå®", "Î¨¥"]}
                                                    ></GridInputSelectBox>

                                                    <GridInputText id={"i-wildbattle-second-poketmon"} dataName={"poketmon"} colSpan={2} label={"ÌõÑÍ≥µÌè¨ÏºìÎ™¨"}></GridInputText>
                                                    <div className="col-span-2">
                                                        <label htmlFor="i-wildbattle-second-attack" className="block text-sm font-medium text-gray-700">
                                                            Í≥µÍ≤©
                                                        </label>
                                                        <div className="flex flex-row">
                                                            <select
                                                                id="i-wildbattle-second-attack"
                                                                name="i-wildbattle-second-attack"
                                                                className="mt-1 block w-3/4 rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                            >
                                                                {attackOption.map((option, idx) => {
                                                                    return (
                                                                        <option key={idx} value={option}>
                                                                            {option}
                                                                        </option>
                                                                    );
                                                                })}
                                                            </select>
                                                            <div className="text-right mt-1 ml-2">
                                                                <button
                                                                    type="button"
                                                                    className={[
                                                                        "w-full py-2 px-4 text-sm font-medium text-white",
                                                                        "inline-flex justify-center rounded-md border border-transparent  shadow-sm  ",
                                                                        "focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2",
                                                                        "bg-indigo-600 hover:bg-indigo-700",
                                                                    ].join(" ")}
                                                                    onClick={() => {
                                                                        let randomAttack = Math.floor(Math.random() * attackOption.length);
                                                                        document.querySelector("#i-wildbattle-second-attack").value = attackOption[randomAttack];
                                                                    }}
                                                                >
                                                                    ÎûúÎç§
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <GridInputText id={"i-wildbattle-second-health"} dataName={"health"} colSpan={1} label={"ÌòÑÏû¨ Ï≤¥Î†•"} default={10}></GridInputText>
                                                    <GridInputSelectBox
                                                        id={"i-wildbattle-second-compatibility"}
                                                        dataName={"compatibility"}
                                                        colSpan={1}
                                                        label={"ÏÉÅÏÑ± Í≤∞Í≥º"}
                                                        options={["Ïäπ", "Ìå®", "Î¨¥"]}
                                                    ></GridInputSelectBox>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="flex mt-4">
                            <div className="flex w-1/2">
                                <div className="w-full m-1 mr-1 bg-white">
                                    <div className="shadow rounded-md">
                                        <div className="bg-white px-4 py-3">
                                            <div className="grid grid-cols-6">
                                                <GridInputButton label={"Copy"} buttonColor={"zinc"} onclick={() => copyToClipBoard(".pre-wildbattle")} colSpan={3} type="button"></GridInputButton>
                                                <GridInputButton label={"ÏÉùÏÑ±"} type="button" onclick={() => createTextWildBattle(".pre-wildbattle")} colSpan={3}></GridInputButton>
                                            </div>
                                        </div>
                                        {/* prettier-ignore */}
                                        <pre className="pre-wildbattle mx-4 py-3 overflow-x-auto scrollbar-remove">
                                            <spen className={'wb-first'} data-name={"poketmon"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨)</spen>Ïùò <spen className={'wb-first'} data-name={"attack"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨Ïùò ÏÑ†ÌÉù Í≥µÍ≤©)!</spen> <br />
                                            <br />
                                            ÏïºÏÉùÏùò <spen className={'wb-second'} data-name={"poketmon"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨)</spen>Ïùò <spen className={'wb-second'} data-name={"attack"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨Ïùò ÏÑ†ÌÉù ÎûúÎç§ Í≥µÍ≤©)!</spen><br />
                                            <br />
                                            üí•ÏïºÏÉùÏùò <spen className={'wb-second'} data-name={"poketmon"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨)</spen> ÏùÄ(Îäî) -<spen className={'wb-first'} data-name={"damage"}>0</spen>Ïùò Îç∞ÎØ∏ÏßÄÎ•º ÏûÖÏóàÎã§!<br />
                                            üí•<spen className={'wb-first'} data-name={"poketmon"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨)</spen> ÏùÄ(Îäî) -<spen className={'wb-second'} data-name={"damage"}>0</spen>Ïùò Îç∞ÎØ∏ÏßÄÎ•º ÏûÖÏóàÎã§!<br />
                                            <br />
                                            <spen className={'wb-first'} data-name={"poketmon"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨)</spen> : <spen className={'wb-first'} data-name={"health"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨Ïùò Ï≤¥Î†• - Îç∞ÎØ∏ÏßÄ)</spen><br />
                                            <spen className={'wb-second'} data-name={"poketmon"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨)</spen> : <spen className={'wb-second'} data-name={"health"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨Ïùò Ï≤¥Î†• - Îç∞ÎØ∏ÏßÄ)</spen><br />
                                            <br />
                                            ..Î¨¥ÏóáÏùÑ Ìï†Íπå Î°úÌÜ†?<br />
                                            <br />
                                            ‚ñ∑‚úåÔ∏èÏû¨Îπ†Î•∏ Í≥µÍ≤©<br />
                                            ‚ñ∑‚úäÎ¨µÏßÅÌïú Í≥µÍ≤©<br />
                                            ‚ñ∑üñêÔ∏èÏú†Ïó∞Ìïú Í≥µÍ≤©<br />
                                            ‚ñ∑ Ìè¨ÌöçÌïúÎã§.<br />
                                        </pre>
                                    </div>
                                </div>
                            </div>
                            <div className="flex w-1/2">
                                <div className="w-full m-1 ml-0 bg-white">
                                    <div className="shadow rounded-md">
                                        <div className="bg-white px-4 py-3">
                                            <div className="grid grid-cols-6">
                                                <GridInputButton label={"Copy"} buttonColor={"zinc"} onclick={() => copyToClipBoard(".pre-strangebattle")} colSpan={3} type="button"></GridInputButton>
                                                <GridInputButton label={"ÏÉùÏÑ±"} type="button" onclick={() => createTextWildBattle(".pre-strangebattle", true)} colSpan={3}></GridInputButton>
                                            </div>
                                        </div>
                                        {/* prettier-ignore */}
                                        <pre className="pre-strangebattle mx-4 py-3 overflow-x-auto scrollbar-remove">
                                            <spen className={'wb-first'} data-name={"poketmon"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨)</spen>Ïùò <spen className={'wb-first'} data-name={"attack"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨Ïùò ÏÑ†ÌÉù Í≥µÍ≤©)!</spen> <br />
                                            <br />
                                            ÏïºÏÉùÏùò <spen className={'wb-second'} data-name={"poketmon"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨)</spen>Ïùò <spen className={'wb-second'} data-name={"attack"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨Ïùò ÏÑ†ÌÉù ÎûúÎç§ Í≥µÍ≤©)!</spen><br />
                                            <br />
                                            üí•ÏïºÏÉùÏùò <spen className={'wb-second'} data-name={"poketmon"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨)</spen>ÏùÄ(Îäî) -<spen className={'wb-first'} data-name={"damage"}>0</spen>Ïùò Îç∞ÎØ∏ÏßÄÎ•º ÏûÖÏóàÎã§!<br />
                                            üí•<spen className={'wb-first'} data-name={"poketmon"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨)</spen>ÏùÄ(Îäî) -<spen className={'wb-second'} data-name={"damage"}>0</spen>Ïùò Îç∞ÎØ∏ÏßÄÎ•º ÏûÖÏóàÎã§!<br />
                                            <br />
                                            <spen className={'wb-first'} data-name={"poketmon"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨)</spen> : <spen className={'wb-first'} data-name={"health"}>(ÏÑ†Í≥µ Ìè¨ÏºìÎ™¨Ïùò Ï≤¥Î†• - Îç∞ÎØ∏ÏßÄ)</spen><br />
                                            <spen className={'wb-second'} data-name={"poketmon"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨)</spen> : <spen className={'wb-second'} data-name={"health"}>(ÌõÑÍ≥µ Ìè¨ÏºìÎ™¨Ïùò Ï≤¥Î†• - Îç∞ÎØ∏ÏßÄ)</spen><br />
                                            <br />
                                            ..Î¨¥ÏóáÏùÑ Ìï†Íπå Î°úÌÜ†?<br />
                                            <br />
                                            ‚ñ∑‚úåÔ∏èÏû¨Îπ†Î•∏ Í≥µÍ≤©(Ïù¥ÏÉÅ Í∞úÏ≤¥)<br />
                                            ‚ñ∑‚úäÎ¨µÏßÅÌïú Í≥µÍ≤©(Ïù¥ÏÉÅ Í∞úÏ≤¥)<br />
                                            ‚ñ∑üñêÔ∏èÏú†Ïó∞Ìïú Í≥µÍ≤©(Ïù¥ÏÉÅ Í∞úÏ≤¥)<br />
                                            ‚ñ∑ Ìè¨ÌöçÌïúÎã§.<br />
                                        </pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="flex flex-col w-1/3">
                        <div className="bg-white">
                            <div className="mx-auto py-2 px-2">
                                <div className="flex flex-col w-full">
                                    <div className="grid grid-cols-6 gap-6 my-4">
                                        <GridInputButton label={"ÎìúÎ°≠Îã§Ïö¥"} buttonColor={"zinc"} onclick={() => setBoilerplateViewType("dropdown")} colSpan={3} type="button"></GridInputButton>
                                        <GridInputButton label={"Î¶¨Ïä§Ìä∏"} type="button" onclick={() => setBoilerplateViewType("list")} colSpan={3}></GridInputButton>
                                    </div>
                                    {boilerplateViewType === "dropdown" && boilerplate.length > 0 ? <SelectDropdownText object={boilerplate} label={"ÏÉÅÏö©Íµ¨"}></SelectDropdownText> : null}
                                    {boilerplateViewType === "list" && boilerplate.length > 0
                                        ? boilerplate.map((element, index) => {
                                              return (
                                                  <div key={index} className="shadow rounded-md p-1 mb-1 bg-slate-300">
                                                      <pre onClick={clickCopyToClipBoard} className="bg-white p-2 text-sm font-medium text-gray-700 overflow-x-auto scrollbar-remove">
                                                          {element.TEXT}
                                                      </pre>
                                                  </div>
                                              );
                                          })
                                        : null}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}

let bolierPlate = {
    wildbattle: [
        `
ÏïºÏÉùÏùò -ÏùÄ(Îäî) Í≥µÍ≤©ÏùÑ ÌïòÍ∏∞ ÏúÑÌï¥ ÏûêÏÑ∏Î•º Î∞îÎ°ú Ïû°Í≥† ÏûàÎã§..
ÎÇ¥Î≥¥ÎÇº Ìè¨ÏºìÎ™¨Ïùò Ï†ïÎ≥¥(Ïù¥Î¶Ñ, Î†àÎ≤®)Î•º Í∏∞ÏûÖÌï¥Ï£ºÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.
`,
        `
-ÏùÄ(Îäî) -ÏùÑ(Î•º) ÎÇ¥Î≥¥ÎÉàÎã§!

- : 10
- : 10, 15

..Î¨¥ÏóáÏùÑ Ìï†Íπå Î°úÌÜ†?

‚ñ∑‚úåÔ∏èÏû¨Îπ†Î•∏ Í≥µÍ≤©
‚ñ∑‚úäÎ¨µÏßÅÌïú Í≥µÍ≤©
‚ñ∑üñêÔ∏èÏú†Ïó∞Ìïú Í≥µÍ≤©
‚ñ∑ Ìè¨ÌöçÌïúÎã§.
`,
        `

ÏïºÏÉùÏùò ÏùÄ(Îäî) Ïì∞Îü¨Ï°åÎã§!
ÏùÄ(Îäî) 0.5Ïùò Í≤ΩÌóòÏπòÎ•º ÌöçÎìùÌñàÎã§!

ÏùÄ(Îäî) Ïì∞Îü¨Ï°åÎã§!
‚Ä¶Ïñ¥ÎñªÍ≤å Ìï†Íπå Î°úÌÜ†?

‚ñ∑Îã§Ïùå Ìè¨ÏºìÎ™¨ÏùÑ ÎÇ¥Î≥¥ÎÇ∏Îã§.
‚ñ∑ÎèÑÎßùÍ∞ÑÎã§.
`,
        `
‚úîÔ∏èÎ∞∞ÌãÄ Ï¢ÖÎ£å! ÏàòÍ≥†ÌñàÏñ¥ Î°úÌÜ†~!
`,
    ],
};

const failText = [
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Ïó¨Í∏∞Îäî ÏïÑÎ¨¥Í≤ÉÎèÑ Î≥¥Ïù¥ÏßÄ ÏïäÎäî Í≤É Í∞ôÏïÑ Î°úÌÜ†! Îã§Î•∏ Í≥≥Ïóê Í∞ÄÎ≥ºÍπå?

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Ï°∞Í∏à Ï†Ñ ÍπåÏßÄ Ïó¨Í∏∞ ÏûàÏóàÎçò Í≤É Í∞ôÏùÄÎç∞ Î°úÌÜ†‚Ä¶ Ï°∞Í∏à Îçî Ï∞æÏïÑÎ≥¥Ïûê Î°úÌÜ†!

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Ïù¥Í±¥ Îã§Î•∏ Ìè¨ÏºìÎ™¨Ïùò Î∞úÏûêÍµ≠Ïù¥Ïïº Î°úÌÜ†! Îã§Î•∏ Í≥≥Ïóê Í∞ÄÎ≥ºÍπå Î°úÌÜ†?

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Î°úÌÜ†? ‚Ä¶ÏºÄÌÖå-! Î¨¥Ïä® ÏÜåÎ¶∞Í∞Ä ÌñàÎäîÎç∞ ÎÇ¥ Íº¨Î•¥Î•µ ÏÜåÎ¶¨ÏòÄÏñ¥ Î°úÌÜ†!

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
ÌùîÏ†ÅÏù¥ Î≥¥Ïù¥ÏßÄ ÏïäÏïÑ Î°úÌÜ†! Ï†ÄÍ∏∞ ÏûàÎäî Ìè¨ÏºìÎ™¨Îì§ÌïúÌÖå Î¨ºÏñ¥Î≥¥Î©¥ ÏïåÍπå Î°úÌÜ†?

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Ï†Ä Ï™ΩÏóêÏÑú Î∞©Í∏à Î¨¥Ïä® ÏÜåÎ¶¨ Îì§Î¶¨ÏßÄ ÏïäÏïòÏñ¥ Î°úÌÜ†? Ìïú Î≤à Í∞ÄÎ≥¥Ïûê Î°úÌÜ†!

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
‚Ä¶Ïç∞Î†ÅÌï† Ï†ïÎèÑÎ°ú Ï°∞Ïö©Ìï¥ Î°úÌÜ†-!!

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Ïïó! Ïù¥Í±¥! ‚Ä¶. ÎåÄÌÉÄÏ∂úÎèô Ïù∏ÌòïÏù¥Ïïº Î°úÌÜ†! ÎàÑÍ∞Ä Ïù¥Îü∞Í±∏ ÎëêÍ≥† Í∞Ñ Í±∞ÏßÄ Î°úÌÜ†?

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
(Ìè¨ÏºìÎ™¨Ïùò Ïö∏ÏùåÏÜåÎ¶¨Í∞Ä Îì§Î¶∞Îã§!)
Î°úÌÜ†? ÏïÑ, Ïù¥Í±¥ ÎÇ¥Í∞Ä Í∑∏ Ìè¨ÏºìÎ™¨ Ïö∏ÏùåÏÜåÎ¶¨ ÏÉòÌîåÏùÑ Ïû¨ÏÉùÌï¥Î≥∏Í±∞Ïïº Î°úÌÜ†!

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
    `
- ‚ö°Ô∏èÏïºÏÉù Ìè¨ÏºìÎ™¨ ~Ïùò ÌùîÏ†Å ÏàòÏÉâ Ï§ë Î°úÌÜ†‚Ä¶
Ïñ¥Ïñ¥?‚Ä¶Ï∞æÏïòÎã§! ‚Ä¶..ÎÇ¥ Î≥¥Ï°∞ Î∞∞ÌÑ∞Î¶¨ ÎßêÏù¥Ïïº, Î°úÌÜ†~

‚ñ∑ÏàòÏÉâÏùÑ Ïù¥Ïñ¥Í∞ÑÎã§.
`,
];
